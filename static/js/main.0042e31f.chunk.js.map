{"version":3,"sources":["App.js","serviceWorker.js","index.js","../../src/index.tsx"],"names":["fetchData","seed","Promise","resolve","setTimeout","Array","from","keys","map","_","idx","Element","children","style","padding","marginBottom","marginTop","backgroundColor","App","useState","elements","setElements","isLoading","setIsLoading","hasMore","setHasMore","setSeed","a","data","curr","Math","random","display","flexDirection","justifyContent","alignItems","onReachBottom","element","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","className","threshold","loader","React.useRef","React.useEffect","observer","IntersectionObserver","entries","first","isIntersecting","loaderCurrent","current","observe","unobserve","React.createElement","ref"],"mappings":"iUAKA,SAASA,EAAUC,GACjB,OAAO,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACTD,EAAQE,MAAMC,KAAKD,MAAM,IAAIE,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OAAYA,EAAMT,QAC1D,QAIP,SAASU,EAAT,GAAgC,IAAbC,EAAY,EAAZA,SACjB,OACE,yBACEC,MAAO,CACLC,QAAS,OACTC,aAAc,OACdC,UAAW,OACXC,gBAAiB,mBAGlBL,GA4CQM,MAvCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEqBF,oBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIWN,mBAAS,GAJpB,mBAINlB,EAJM,KAIAyB,EAJA,iDAMb,4BAAAC,EAAA,6DACEJ,GAAa,GADf,SAEqBvB,EAAUC,GAF/B,OAEQ2B,EAFR,OAIEP,GAAY,SAACQ,GAAD,4BAAcA,GAAd,YAAuBD,OACnCF,EAAQzB,EAAO,IACfwB,EAAWK,KAAKC,SAAW,KAC3BR,GAAa,GAPf,4CANa,sBAgBb,OACE,yBACEV,MAAO,CACLmB,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,WAGd,kBAAC,IAAD,CACEC,cA1BO,2CA2BPd,UAAWA,EACXE,QAASA,GAERJ,EAASZ,KAAI,SAAC6B,GAAD,OACZ,kBAAC1B,EAAD,CAAS2B,IAAKD,GAAUA,QAG1Bb,GAAW,2DClDCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,+aE7H5B,SAAuB,G,IACrB9C,EAAQ,WACR,IAAA+C,iBAAS,IAAG,KAAE,EACdnC,EAAO,UACPF,EAAS,YACTc,EAAa,gBACb,IAAAwB,iBAAS,IAAG,IAAG,EAETC,EAASC,EAAMA,OAAuB,MA0B5C,OAxBAC,aAAgB,WACd,IASMC,EAAW,IAAIC,sBATJ,SAACC,GACT,IAAAC,EAASD,EAAJ,IAEP5C,GAAaE,GAAW2C,EAAMC,gBACjChC,MAIY,CAAEwB,UAAWA,IAGvBS,EAAgBR,EAAOS,QAK7B,OAJID,GACFL,EAASO,QAAQF,GAGZ,WACDA,GACFL,EAASQ,UAAUH,MAGtB,CAAC7C,EAASF,EAAWc,EAAewB,IAGrCa,uBAAKd,UAAW,0BAA0BA,GACvC/C,EACD6D,uBAAKd,UAAU,iCACbc,uBAAKC,IAAKb,EAAQF,UAAU,+B","file":"static/js/main.0042e31f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n// import EndlessScroll from \"./EndlessScroll\";\nimport EndlessScroll from \"react-endless-scroll\";\nimport \"./App.css\";\n\nfunction fetchData(seed) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Array.from(Array(10).keys()).map((_, idx) => idx + seed));\n    }, 1000);\n  });\n}\n\nfunction Element({ children }) {\n  return (\n    <div\n      style={{\n        padding: \"40px\",\n        marginBottom: \"10px\",\n        marginTop: \"10px\",\n        backgroundColor: \"cornflowerblue\",\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction App() {\n  const [elements, setElements] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [seed, setSeed] = useState(0);\n\n  async function fetch() {\n    setIsLoading(true);\n    const data = await fetchData(seed);\n\n    setElements((curr) => [...curr, ...data]);\n    setSeed(seed + 10);\n    setHasMore(Math.random() > 0.05);\n    setIsLoading(false);\n  }\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <EndlessScroll\n        onReachBottom={fetch}\n        isLoading={isLoading}\n        hasMore={hasMore}\n      >\n        {elements.map((element) => (\n          <Element key={element}>{element}</Element>\n        ))}\n      </EndlessScroll>\n      {!hasMore && <p>You've reached the bottom!</p>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as React from \"react\";\nimport \"./endless-scroll.scss\";\n\nexport type Props = {\n  children: React.ReactNode;\n  className?: string;\n  hasMore: boolean;\n  isLoading: boolean;\n  onReachBottom: Function;\n  threshold?: number | Array<number>;\n};\n\nfunction EndlessScroll({\n  children,\n  className = \"\",\n  hasMore,\n  isLoading,\n  onReachBottom,\n  threshold = 0.0,\n}: Props) {\n  const loader = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    const loadMore = (entries: Array<IntersectionObserverEntry>) => {\n      const [first] = entries;\n\n      if (!isLoading && hasMore && first.isIntersecting) {\n        onReachBottom();\n      }\n    };\n\n    const options = { threshold: threshold };\n    const observer = new IntersectionObserver(loadMore, options);\n\n    const loaderCurrent = loader.current;\n    if (loaderCurrent) {\n      observer.observe(loaderCurrent);\n    }\n\n    return () => {\n      if (loaderCurrent) {\n        observer.unobserve(loaderCurrent);\n      }\n    };\n  }, [hasMore, isLoading, onReachBottom, threshold]);\n\n  return (\n    <div className={`endless-scroll-wrapper ${className}`}>\n      {children}\n      <div className=\"endless-scroll-loader-wrapper\">\n        <div ref={loader} className=\"endless-scroll-loader\" />\n      </div>\n    </div>\n  );\n}\n\nexport default EndlessScroll;\n"],"sourceRoot":""}